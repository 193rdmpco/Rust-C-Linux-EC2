Sensor Benchmark Suite

This repository contains a full end-to-end workflow for simulating, testing, and benchmarking a variety of embedded‑style "sensors" in both C++ and Rust, along with a comparison script to analyze performance and memory usage between the two implementations. It also includes edge-case benchmarks for concurrency, memory safety, network I/O, and error-propagation scenarios.

Table of Contents

Overview

Project Structure

Variable Names & Key Concepts

C++ Testbench

Rust Testbench

Benchmark Drivers

Edge-Case Benchmarks

Comparison Script

Running the Workflow

What the Tests Prove

Overview

We have built:

Mock sensor classes for servos, LEDs, USB cache, volatile pointers, RF modules, Wi‑Fi scanning, buttons, and potentiometers.

Unit tests in both C++ (Google Test) and Rust (#[test]) to verify functionality.

Benchmark drivers that repeatedly exercise each mock and record execution time and memory usage.

Edge-case benchmarks for data races, buffer-overflows, high-frequency network I/O, exception vs panic propagation, and concurrent channel communication.

A Python comparison script that merges results, computes deltas, labels the faster implementation, and calculates human-readable speedup ratios.

This allows an apples‑to‑apples performance and safety comparison between C++ and Rust for both normal operation and critical edge cases.

Project Structure################################################################
cpp_sensors/          # C++ project
  include/            # Header files (sensors.hpp)
  src/                # Implementation (sensors.cpp)
  tests/              # Google Test files
  main.cpp            # C++ benchmark driver
  CMakeLists.txt      # Build config
  build/              # CMake build directory
  sensor_tests        # Unit‑test binary
  sensor_bench        # Benchmark binary
  cpp_sensor_bench.csv# Basic benchmark results
  compare.py          # Python comparison script
  comparison_full.csv # Merged basic results

rust_sensors/         # Rust project
  src/lib.rs          # Sensor implementations
  src/main.rs         # Rust benchmark driver
  tests/              # Unit tests (sensors.rs)
  Cargo.toml          # Package config
  target/             # Cargo build outputs
  rust_sensor_bench.csv# Rust basic benchmark results

edge_case_tests/      # Edge-case benchmarks
  data_race.cpp       # C++ data-race stress test
  data_race.rs        # Rust data-race stress test
  buffer_fuzz.cpp     # C++ buffer-overflow fuzzing
  buffer_fuzz.rs      # Rust buffer-overflow fuzzing
  edge_case_results.csv# Data-race & buffer-fuzz results

advanced_io_tests/    # Network and concurrency benchmarks
  net_io.cpp          # C++ high-frequency TCP echo test
  net_io.rs           # Rust high-frequency TCP echo test
  propagate_exception.cpp # C++ exception propagation test
  propagate_panic.rs  # Rust panic propagation test
  chan_comm.cpp       # C++ channel communication test
  chan_comm_rust/     # Cargo project for Rust channel test
  edge6_9_10_results.csv # Net I/O, propagation, channel results

combined_results.csv  # Unified CSV of all categories
###########################################################

Variable Names & Key Concepts

Sensors: Servo, LED, USBCache, VolatileUSB, RFModule, WiFiScanner, Button, Pot.

Benchmark driver: records time_ns, mem_kb for each sensor operation.

Edge-case metrics:

Data‐race: final counter vs expected, time_ms.

Buffer‐fuzz: exception/panic count, time_ms.

Net I/O & channels: msgs, sec, mps.

Propagation: caught, ms.

Comparison script: compare.py, visualize_edge6_9_10.py, and tabulation tools.

C++ Testbench

Header (sensors.hpp): defines sensor interfaces.

Implementation (sensors.cpp): simulates delays and hardware behaviors.

Unit Tests: tests/sensors_test.cpp (C++).

Benchmark: main.cpp loops, prints CSV.

Rust Testbench

Library (src/lib.rs): Rust sensor mocks.

Unit Tests: tests/sensors.rs.

Benchmark: src/main.rs, prints CSV.

Benchmark Drivers

Basic: loops over sensor calls, records nanoseconds and kB.

Scripts generate comparison_full.csv.

Edge-Case Benchmarks

Data-Race Stress Test

C++: unsynchronized vs atomic vs mutex counters.

Rust: atomic vs mutex (no unsafe data race).

CSV: edge_case_results.csv

Buffer-Overflow Fuzzing

C++: vector::at + exception catching.

Rust: index + catch_unwind.

Triggers ~50% errors, measures time.

CSV: edge_case_results.csv

High-Frequency Network I/O

TCP echo of 1 000 000 bytes.

Measures mps.

CSV: edge6_9_10_results.csv

Panic vs Exception Propagation

30-deep call chain, 10 000 unwinds.

Measures caught, ms.

CSV: edge6_9_10_results.csv

Concurrent Channel Communication

4 producers/4 consumers, 1 000 000 messages.

C++: mutex + condition_variable; Rust: crossbeam-channel.

Measures mps.

CSV: edge6_9_10_results.csv

Comparison Script

Basic: compare.py → comparison_full.csv.

Advanced: visualize_edge6_9_10.py → prints net I/O, propagation, channel tables.

Tabulation: tabulate_results.py for edge-case CSVs.

Running the Workflow

Basic (C++ & Rust): build, run benchmarks, then python3 compare.py.

Edge-case: compile both languages’ tests, run, then use tabulate_results.py.

Advanced I/O: ensure Rust channel built via Cargo, run visualize_edge6_9_10.py.

Combine with combined_results.csv for unified analysis.

What the Tests Prove

Performance differences across sensor, concurrency, and I/O patterns.

Safety: Rust prevents data races and out-of-bounds at compile/runtime.

Trade-offs: raw speed vs built-in safety abstractions.

Embedded considerations: binary size, stack usage, no_std, custom allocators, RTOS integration.

End of README



