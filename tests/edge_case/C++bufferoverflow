// File: buffer_fuzz.cpp
#include <iostream>
#include <vector>
#include <random>
#include <chrono>

int main() {
    const int BUFSIZE = 10;
    const int ITERS   = 100000;
    std::mt19937 rng(std::random_device{}());
    std::uniform_int_distribution<int> dist(0, BUFSIZE * 2);

    int exception_count = 0;
    auto t0 = std::chrono::high_resolution_clock::now();

    for(int i=0; i<ITERS; ++i) {
        int len = dist(rng);
        std::vector<int> buf(BUFSIZE);
        try {
            for(int j=0; j<len; ++j) {
                buf.at(j) = j;  // bounds-checked
            }
        } catch(const std::out_of_range&) {
            exception_count++;
        }
    }

    auto d = std::chrono::high_resolution_clock::now() - t0;
    std::cout << "C++ panics=" << exception_count
              << " time_ms=" 
              << std::chrono::duration_cast<std::chrono::milliseconds>(d).count()
              << "\n";
    return 0;
}
