// net_io.rs
use std::io::{Read, Write};
use std::net::{TcpListener, TcpStream};
use std::thread;
use std::time::Instant;

const PORT: u16 = 4000;
const MESSAGES: usize = 1_000_000;
const PAYLOAD: u8 = 0x42;

fn handle_client(mut stream: TcpStream) {
    let mut buf = [0u8;1];
    while stream.read_exact(&mut buf).is_ok() {
        stream.write_all(&buf).unwrap();
    }
}

fn main() {
    // Start server
    let listener = TcpListener::bind(("0.0.0.0", PORT)).unwrap();
    thread::spawn(move || {
        let (stream, _) = listener.accept().unwrap();
        handle_client(stream);
    });

    thread::sleep(std::time::Duration::from_millis(100));

    // Client
    let mut stream = TcpStream::connect(("127.0.0.1", PORT)).unwrap();
    let mut buf = [0u8;1];
    stream.write_all(&[PAYLOAD]).unwrap();
    stream.read_exact(&mut buf).unwrap();

    let t0 = Instant::now();
    for _ in 0..MESSAGES {
        stream.write_all(&[PAYLOAD]).unwrap();
        stream.read_exact(&mut buf).unwrap();
    }
    let d = t0.elapsed().as_secs_f64();
    let mps = MESSAGES as f64 / d;
    println!("msgs={} sec={} mps={}", MESSAGES, d, mps);
}
